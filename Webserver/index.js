////////////////////// C√ÅC MODULE //////////////////////
const express = require("express");
const http = require("http");
const socketIO = require("socket.io");
const mysql = require("mysql");
const { TagBuilder, IotGateway } = require("kepserverex-js");
const lodash = require("lodash");

////////////////////// KHAI B√ÅO EXPRESS //////////////////////
const app = express();
const server = http.createServer(app);
const io = socketIO(server);

app.use(express.static("public"));
app.set("view engine", "ejs");
app.set("views", "./views");

server.listen(3000, () => console.log("‚úÖ Server ch·∫°y t·∫°i http://127.0.0.1:3000"));
app.get("/", (req, res) => res.render("home"));

////////////////////// K·∫æT N·ªêI MySQL //////////////////////
let sqlcon;

function initSqlConnection() {
  function connect() {
    sqlcon = mysql.createConnection({
      host: "127.0.0.1",
      user: "admin",
      password: "123456",
      database: "sql_plc",
      port: 3306,
      charset: "utf8mb4",
      timezone: '+07:00'
    });

    sqlcon.connect(err => {
      if (err) {
        console.log("‚ùå MySQL l·ªói, th·ª≠ l·∫°i sau 2s");
        setTimeout(connect, 2000);
      } else {
        console.log("‚úÖ MySQL ƒë√£ k·∫øt n·ªëi");
      }
    });

    sqlcon.on("error", err => {
      if (err.code === "PROTOCOL_CONNECTION_LOST") connect();
      else throw err;
    });
  }
  connect();
}

initSqlConnection();

////////////////////// K·∫æT N·ªêI KEPWARE //////////////////////
const tagBuilder = new TagBuilder({ namespace: "Channel1.Device1" });
const iotGateway = new IotGateway({ host: "127.0.0.1", port: 5000 });

const tags = [
  "sql_insert_Trigger", "state_emergency_stop", "state_auto", "state_motor",
  "state_sensor_1", "state_sensor_2", "state_sensor_3", "state_sensor_4",
  "state_sensor_5", "state_sensor_detech",
  "state_cylinder_1", "state_cylinder_2", "state_cylinder_3", "state_cylinder_4", "state_cylinder_5",
  "cylinder1_tripped", "cylinder2_tripped", "cylinder3_tripped", "cylinder4_tripped", "cylinder5_tripped",
  "motor_tripped"
];

const TagList = tags.reduce((tb, tag) => tb.read(tag), tagBuilder).get();
let tagArr = [];

function fn_tagRead() {
  return iotGateway.read(TagList).then(data => {
    tagArr = lodash.map(data, item => item.v);
  });
}

////////////////////// K·∫æT N·ªêI TWILIO //////////////////////
require('dotenv').config();
const twilio = require('twilio');
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

/**
 * Format s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam v·ªÅ d·∫°ng +84
 * @param {string} phone
 * @returns {string}
 */
function formatPhoneNumberVN(phone) {
  if (phone.startsWith('0')) {
    return '+84' + phone.slice(1);
  }
  return phone;
}

/**
 * G·ª≠i SMS qua Twilio
 * @param {string} to 
 * @param {string} body
 */
async function sendSMS(to, body) {
  const formattedTo = formatPhoneNumberVN(to);

  const msgOptions = {
    from: process.env.TWILIO_FROM_NUMBER,
    to: formattedTo,
    body
  };

  try {
    const message = await client.messages.create(msgOptions);
    console.log("‚úÖ ƒê√£ g·ª≠i SMS ch·ª©a m√£ OTP:", message.sid);
    return message;
  } catch (err) {
    console.error("‚ùå L·ªói g·ª≠i SMS:", err);
    throw err;
  }
}

////////////////////// ƒê·ªåC PLC ƒê·ªäNH K·ª≤ //////////////////////
let last_trigger = false;

setInterval(() => {
    fn_tagRead().then(() => {
        fn_sql_insert();
        fn_Alarm_Manage();
    });
}, 1000);

var values_old = [];

// H√†m so s√°nh 2 m·∫£ng theo gi√° tr·ªã
function arraysEqual(a, b) {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}

// H√†m ghi d·ªØ li·ªáu v√†o MySQL n·∫øu tr·∫°ng th√°i m·ªõi kh√°c tr·∫°ng th√°i c≈©
function fn_sql_insert() {
  const tzoffset = new Date().getTimezoneOffset() * 60000;
  const timeNow = new Date(Date.now() - tzoffset).toISOString().slice(0, -1).replace("T", " ");

  const values = [
    tagArr[1], tagArr[2], tagArr[3], tagArr[4], tagArr[5],
    tagArr[6], tagArr[7], tagArr[8], tagArr[9], tagArr[10],
    tagArr[11], tagArr[12], tagArr[13], tagArr[14]
  ];

  if (!arraysEqual(values, values_old)) {
    const sql = `
      INSERT INTO plc_data (
        date_time, data_run, data_auto, data_motor,
        data_sensor_1, data_sensor_2, data_sensor_3, data_sensor_4, data_sensor_5, data_sensor_detech,
        data_cylinder_1, data_cylinder_2, data_cylinder_3, data_cylinder_4, data_cylinder_5
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;

    const fullValues = [timeNow, ...values];
    values_old = [...values];

    sqlcon.query(sql, fullValues, err => {
      if (err) {
        console.error("‚ùå SQL INSERT error:", err);
      } else {
        console.log("‚úÖ SQL ghi d·ªØ li·ªáu tr·∫°ng th√°i m·ªõi th√†nh c√¥ng");
      }
    });
  }
}

// /////////////////////////////// GHI C·∫¢NH B√ÅO V√ÄO DATABASE ///////////////////////////////
function fn_sql_alarm_insert(ID, AlarmName) {
  const checkSql = "SELECT * FROM alarm WHERE ID = ? AND Status = 'I'";
  sqlcon.query(checkSql, [ID], (err, result) => {
    if (err) {
      console.error("‚ùå L·ªói ki·ªÉm tra alarm:", err.message);
      io.emit("log", { type: "error", message: `‚ùå Ki·ªÉm tra alarm l·ªói: ${err.message}` });
      return;
    }

    // N·∫øu alarm ƒë√£ t·ªìn t·∫°i v√† ch∆∞a x√°c nh·∫≠n th√¨ kh√¥ng ghi ti·∫øp
    if (result.length > 0) return;

    const sql = "INSERT INTO alarm (date_time, ID, Status, AlarmName) VALUES (?, ?, ?, ?)";
    const tzoffset = (new Date()).getTimezoneOffset() * 60000;
    const timeNow = new Date(Date.now() - tzoffset).toISOString().slice(0, -1).replace("T", " ");
    const values = [timeNow, ID, 'I', AlarmName];

    sqlcon.query(sql, values, (err) => {
      if (err) {
        console.error("‚ùå L·ªói ghi alarm:", err.message);
        io.emit("log", { type: "error", message: `‚ùå Ghi alarm l·ªói: ${err.message}` });
      } else {
        io.emit("log", { type: "info", message: `üÜò Ghi c·∫£nh b√°o m·ªõi: ID ${ID} - ${AlarmName}` });
      }
    });
  });
}

// /////////////////////////////// X√ÅC NH·∫¨N H·∫æT C·∫¢NH B√ÅO ///////////////////////////////
// H√†m t·ª± ƒë·ªông x√°c nh·∫≠n c·∫£nh b√°o
function fn_sql_alarm_ack(ID){
  sqlcon.query("UPDATE alarm SET Status = 'IO' WHERE ID = ? AND Status = 'I'", [ID], function (err, result) {
    if (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i alarm:", err.message);
    } else {
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ID ${ID} th√†nh 'IO'. Affected rows: ${result.affectedRows}`);
    }
  });
}
// /////////////////////////// TR·∫†NG TH√ÅI C·∫¢NH B√ÅO TR∆Ø·ªöC ƒê√ì ///////////////////////////
const alarmStates = [
  { id: 1, name: "xi lanh 1 s·ª± c·ªë", prev: false },
  { id: 2, name: "xi lanh 2 s·ª± c·ªë", prev: false },
  { id: 3, name: "xi lanh 3 s·ª± c·ªë", prev: false },
  { id: 4, name: "xi lanh 4 s·ª± c·ªë", prev: false },
  { id: 5, name: "xi lanh 5 s·ª± c·ªë", prev: false },
  { id: 6, name: "ƒë·ªông c∆° bƒÉng t·∫£i s·ª± c·ªë", prev: false }, 
];

// /////////////////////////// H√ÄM QU·∫¢N L√ù C·∫¢NH B√ÅO TO√ÄN H·ªÜ TH·ªêNG ///////////////////////////
function fn_Alarm_Manage() {
  const tagalarmData = {
    cylinder1_tripped : tagArr[15],
    cylinder2_tripped : tagArr[16],
    cylinder3_tripped : tagArr[17],
    cylinder4_tripped : tagArr[18],
    cylinder5_tripped : tagArr[19],
    motor_tripped     : tagArr[20],
  };

  const tagValues = Object.values(tagalarmData);

  alarmStates.forEach((alarm, index) => {
    const current = tagValues[index] ?? false;

    // Ki·ªÉm tra thay ƒë·ªïi tr·∫°ng th√°i
    if (current !== alarm.prev) {
      if (current === true) {
        fn_sql_alarm_insert(alarm.id, alarm.name);
      } else {
        fn_sql_alarm_ack(alarm.id);
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªán t·∫°i
      alarm.prev = current;
    }
  });
}

////////////////////// SOCKET.IO //////////////////////

function fn_tag() {
  const tagData = {
    emergency_stop: tagArr[1],
    auto: tagArr[2],
    motor: tagArr[3],
    sensor_1: tagArr[4],
    sensor_2: tagArr[5],
    sensor_3: tagArr[6],
    sensor_4: tagArr[7],
    sensor_5: tagArr[8],
    sensor_detech: tagArr[9],
    cylinder_1: tagArr[10],
    cylinder_2: tagArr[11],
    cylinder_3: tagArr[12],
    cylinder_4: tagArr[13],
    cylinder_5: tagArr[14]
  };

  io.sockets.emit("tag_data", tagData);
}

io.on("connection", (socket) => {
  console.log("üü¢ Client ƒë√£ k·∫øt n·ªëi");

  // G·ª≠i d·ªØ li·ªáu tag khi client y√™u c·∫ßu
  socket.on("Client-send-data", () => {
    fn_tag();
  });

  // X·ª≠ l√Ω s·ª± ki·ªán t·ª´ client v√† toggle tr·ª±c ti·∫øp
  socket.on("Client-send-cmd-toggle", async (tag) => {

    try {
      const currentValue = tagData[tag];
      const newValue = currentValue ? 0 : 1; // toggle 0 ‚Üî 1

      // Ghi gi√° tr·ªã m·ªõi l√™n KepServer
      tagBuilder.clean();
      const set_value = tagBuilder.write(tag, newValue).get();
      await iotGateway.write(set_value);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i local
      tagArr[index] = newValue;

      console.log(`‚úÖ Toggle tag "${tag}" th√†nh c√¥ng. Gi√° tr·ªã m·ªõi: ${newValue}`);
      io.emit("log", { type: "success", message: `‚úÖ Toggle tag ${tag} th√†nh c√¥ng` });
    } catch (error) {
      console.error(`‚ùå L·ªói toggle tag "${tag}":`, error);
      io.emit("log", { type: "error", message: `‚ùå L·ªói toggle tag ${tag}` });
    }
  });

  socket.on("msg_Alarm_Show", function () {
    const query = "SELECT * FROM alarm WHERE Status = 'I';";
    sqlcon.query(query, function (err, results) {
      if (err) {
        console.error("‚ùå L·ªói truy v·∫•n alarm:", err.message);
        socket.emit("log", { type: "error", message: "L·ªói truy v·∫•n alarm t·ª´ CSDL." });
      } else {
        const alarms = results.map(row => ({ ...row }));
        socket.emit("Alarm_Show", alarms);
      }
    });
  });


  // T√¨m ki·∫øm alarm theo kho·∫£ng th·ªùi gian 
  socket.on("msg_Alarm_ByTime", (data) => {
    try {
      const [startTimeRaw, endTimeRaw] = data;
      const tzoffset = (new Date()).getTimezoneOffset() * 60000;

      const timeS = new Date(new Date(startTimeRaw) - tzoffset);
      const timeE = new Date(new Date(endTimeRaw) - tzoffset);

      const timeSStr = timeS.toISOString().slice(0, 19).replace("T", " ");
      const timeEStr = timeE.toISOString().slice(0, 19).replace("T", " ");

      const query = `SELECT * FROM alarm WHERE date_time BETWEEN ? AND ? ORDER BY date_time DESC`;

      sqlcon.query(query, [timeSStr, timeEStr], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n theo th·ªùi gian:", err);
            return;
        }

        socket.emit("Alarm_ByTime", results.map(row => ({ ...row })));
      });
    } catch (error) {
      console.error("‚ùå L·ªói x·ª≠ l√Ω th·ªùi gian:", error);
    }
  });

  // Log khi client ng·∫Øt k·∫øt n·ªëi
  socket.on("disconnect", () => {
      console.log("üî¥ Client ƒë√£ ng·∫Øt k·∫øt n·ªëi");
  });
});

////////////////////// API //////////////////////
app.use(express.json());
// ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng qua username ho·∫∑c phone
app.get("/api/login", (req, res) => {
  const { user, pass } = req.query;
  if (!user || !pass) {
    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p" });
  }

  const sql = `
    SELECT username, phone_number, role 
    FROM users 
    WHERE (username = ? OR phone_number = ?) AND password = ?
    LIMIT 1
  `;

  sqlcon.query(sql, [user, user, pass], (err, results) => {
    if (err) {
      console.error("‚ùå L·ªói truy v·∫•n ƒëƒÉng nh·∫≠p:", err);
      return res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
    }

    if (results.length === 0) {
      return res.status(401).json({ error: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
    }

    res.json({ success: true, user: results[0] });
  });
});


const fs = require("fs");
const request = require("request");

// API qu√™n m·∫≠t kh·∫©u
app.post('/api/send-otp-forget', async (req, res) => {
  const { phone_number } = req.body;
  console.log("POST /api/send-otp-forget body:", req.body);

  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  const now = new Date();
  const expires = new Date(now.getTime() + 5 * 60000); // 5 ph√∫t

  const checkPhoneSQL = `SELECT id FROM users WHERE phone_number = ?`;

  sqlcon.query(checkPhoneSQL, [phone_number], async (err2, result2) => {
    if (err2) {
      console.error("‚ùå L·ªói truy v·∫•n:", err2);
      return res.status(500).json({ error: "L·ªói truy v·∫•n s·ªë ƒëi·ªán tho·∫°i" });
    }

    if (result2.length === 0) {
      // ‚ùóKh√¥ng t√¨m th·∫•y s·ªë ƒëi·ªán tho·∫°i
      return res.status(404).json({ message: "‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng t·ªìn t·∫°i" });
    }

    try {
      // G·ª≠i OTP v√† l∆∞u v√†o DB
      await sqlcon.query(
        "INSERT INTO otp_codes (otp_code, phone_number, created_at, expires_at) VALUES (?, ?, ?, ?)",
        [otp, phone_number, now, expires]
      );
      
      await sendSMS(phone_number, `M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${otp} . L∆∞u √Ω m√£ ch·ªâ c√≥ t·ªìn t·∫°i trong 5 ph√∫t`);
      console.log(`‚úÖ G·ª≠i OTP ${otp} ƒë·∫øn ${phone_number}`);
      res.json({ message: "‚úÖ M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });

    } catch (err) {
      console.error("‚ùå L·ªói khi g·ª≠i OTP:", err);
      res.status(500).json({ message: "‚ùå L·ªói server khi g·ª≠i OTP" });
    }
  });
});

app.post('/api/verify-otp-forget', (req, res) => {
  const { phone_number, password, otp } = req.body;

  if (!phone_number || !otp || !password) {
    return res.status(400).json({ message: '‚ùóThi·∫øu th√¥ng tin x√°c minh ho·∫∑c m·∫≠t kh·∫©u' });
  }

  const otpSql = `
    SELECT * FROM otp_codes 
    WHERE phone_number = ? AND otp_code = ? 
    ORDER BY created_at DESC 
    LIMIT 1
  `;

  sqlcon.query(otpSql, [phone_number, otp], (err, rows) => {
    if (err) {
      console.error("‚ùå L·ªói khi truy v·∫•n OTP:", err);
      return res.status(500).json({ message: '‚ùå L·ªói server khi x√°c minh OTP', success: false });
    }

    if (!rows.length) {
      return res.status(400).json({ message: '‚ùå M√£ OTP kh√¥ng h·ª£p l·ªá', success: false });
    }

    const record = rows[0];
    const now = new Date();

    if (now > record.expires_at) {
      return res.status(400).json({ message: '‚ùå M√£ OTP ƒë√£ h·∫øt h·∫°n', success: false });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u (d·∫°ng plain text)
    const updateSql = `UPDATE users SET password = ? WHERE phone_number = ?`;

    sqlcon.query(updateSql, [password, phone_number], (err2, result) => {
      if (err2) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", err2);
        return res.status(500).json({ message: '‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u', success: false });
      }

      console.log(`‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho ${phone_number}`);

      // Xo√° OTP sau khi d√πng xong
      sqlcon.query(`DELETE FROM otp_codes WHERE phone_number = ?`, [phone_number]);

      return res.json({ message: '‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!', success: true });
    });
  });
});


// api ƒë·ªïi m·∫≠t kh·∫©u
app.post('/api/change-password', (req, res) => {
  const { username, oldPass, newPass } = req.body;
  if (!username || !oldPass || !newPass) {
    return res.status(400).json({ success: false, message: 'Thi·∫øu d·ªØ li·ªáu' });
  }

  const checkUser = 'SELECT password FROM users WHERE username = ?';
  sqlcon.query(checkUser, [username], (err, results) => {
    const currentPass = results[0].password;
    if (currentPass !== oldPass) {
      return res.status(401).json({ success: false, message: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng' });
    }

    const updatePass = 'UPDATE users SET password = ? WHERE username = ?';
    sqlcon.query(updatePass, [newPass, username], (err2) => {
      if (err2) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:', err2);
        return res.status(500).json({ success: false, message: 'L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u' });
      }

      return res.json({ success: true, message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });
    });
  });
});

                      // T·∫°o t√†i kho·∫£n
// g·ª≠i otp
app.post('/api/send-otp', async (req, res) => {
  const { username, phone_number } = req.body;
  console.log("POST /api/send-otp body:", req.body);

  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  const now = new Date();
  const expires = new Date(now.getTime() + 5 * 60000);

  const checkUsernameSQL = `SELECT id FROM users WHERE username = ?`;
  const checkPhoneSQL = `SELECT id FROM users WHERE phone_number = ?`;

  // Ki·ªÉm tra username tr√πng
  sqlcon.query(checkUsernameSQL, [username], (err1, result1) => {
    if (err1) return res.status(500).json({ error: "L·ªói truy v·∫•n username" });
    if (result1.length > 0) return res.status(409).json({ error: "‚ùó Username ƒë√£ t·ªìn t·∫°i" });

    // Ki·ªÉm tra phone_number tr√πng
    sqlcon.query(checkPhoneSQL, [phone_number], async (err2, result2) => {
      if (err2) return res.status(500).json({ error: "L·ªói truy v·∫•n s·ªë ƒëi·ªán tho·∫°i" });
      if (result2.length > 0) return res.status(409).json({ error: "‚ùó S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i" });

      try {
        console.log("Insert OTP with:", username, otp, phone_number, now, expires);

        await sqlcon.query(
          "INSERT INTO otp_codes (username, otp_code, phone_number, created_at, expires_at) VALUES (?, ?, ?, ?, ?)",
          [username, otp, phone_number, now, expires]
        );

        await sendSMS(phone_number, `M√£ OTP ƒë·ªÉ t·∫°o t√†i kho·∫£n c·ªßa b·∫°n l√†: ${otp} . L∆∞u √Ω m√£ ch·ªâ c√≥ t·ªìn t·∫°i trong 5 ph√∫t`);
         console.log(`‚úÖ G·ª≠i OTP ${otp} ƒë·∫øn ${phone_number}`);
         res.json({ message: "‚úÖ M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });
      } catch (err) {
        console.error("‚ùå L·ªói khi g·ª≠i OTP:", err);
        res.status(500).json({ message: '‚ùå L·ªói server khi g·ª≠i OTP' });
      }
    });
  });
});

app.post('/api/verify-otp', (req, res) => {
  const { username, phone_number, password, otp } = req.body;

  if (!username || !phone_number || !otp || !password) {
    return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin x√°c minh ho·∫∑c m·∫≠t kh·∫©u' });
  }

  const otpSql = `
    SELECT * FROM otp_codes 
    WHERE username = ? AND phone_number = ? AND otp_code = ? 
    ORDER BY created_at DESC 
    LIMIT 1
  `;

  sqlcon.query(otpSql, [username, phone_number, otp], (err, rows) => {
    if (err) {
      console.error("L·ªói khi truy v·∫•n OTP:", err);
      return res.status(500).json({ message: 'L·ªói server khi x√°c minh OTP', success: false });
    }

    if (!rows.length) {
      return res.status(400).json({ message: '‚ùå M√£ OTP kh√¥ng h·ª£p l·ªá', success: false });
    }

    const record = rows[0];
    const now = new Date();

    if (now > record.expires_at) {
      return res.status(400).json({ message: '‚ùå M√£ OTP ƒë√£ h·∫øt h·∫°n', success: false });
    }

    // OTP h·ª£p l·ªá ‚Üí ti·∫øp t·ª•c t·∫°o t√†i kho·∫£n
    const insertUserSql = `
      INSERT INTO users (username, password, phone_number, role)
      VALUES (?, ?, ?, 'user')
    `;

    sqlcon.query(insertUserSql, [username, password, phone_number], (err2) => {
      if (err2) {
        console.error("L·ªói khi t·∫°o t√†i kho·∫£n:", err2);
        return res.status(500).json({ message: '‚ùå L·ªói khi t·∫°o t√†i kho·∫£n', success: false });
      }
       sqlcon.query(`DELETE FROM otp_codes WHERE phone_number = ?`, [phone_number]);
      return res.json({ message: '‚úÖ X√°c minh OTP v√† t·∫°o t√†i kho·∫£n th√†nh c√¥ng', success: true });
    });
  });
});

// load user 
app.get("/api/users", (req, res) => {
  const sql = "SELECT username, phone_number, password FROM users WHERE role = 'user'";
  sqlcon.query(sql, (err, results) => {
    if (err) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", err.message);
      return res.status(500).json({ error: "L·ªói server", details: err.message });
    }

    if (!Array.isArray(results)) {
      console.error("‚ùå D·ªØ li·ªáu kh√¥ng ph·∫£i m·∫£ng:", results);
      return res.status(500).json({ error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
    }

    console.log("üì¶ Danh s√°ch tr·∫£ v·ªÅ:", results);
    res.json(results);
  });
});

// API c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
app.put('/api/update-password', (req, res) => {
  if (!req.body) {
    return res.status(400).json({ error: "Kh√¥ng c√≥ d·ªØ li·ªáu g·ª≠i l√™n" });
  }

  const { username, newPassword } = req.body;

  if (!username || !newPassword) {
    return res.status(400).json({ error: "Thi·∫øu username ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });
  }

  const sql = "UPDATE users SET password = ? WHERE username = ?";
  sqlcon.query(sql, [newPassword, username], (err, result) => {
    if (err) return res.status(500).json({ error: "L·ªói m√°y ch·ªß" });

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.json({ message: "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng" });
  });
});

// Route delete user
app.delete("/api/delete-user", (req, res) => {
  const username = req.query.username;
  if (!username) {
    return res.status(400).json({ error: "Thi·∫øu username" });
  }
  const sql = "DELETE FROM users WHERE username = ?";
  sqlcon.query(sql, [username], (err, result) => {
    if (err) {
      console.error("‚ùå SQL Error:", err);
      return res.status(500).json({ error: "L·ªói truy v·∫•n CSDL" });
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y user" });
    }

    res.json({ success: true, message: `ƒê√£ x√≥a user: ${username}` });
  });
});

// check_qr
app.get("/api/search", (req, res) => {
    const qr = req.query.qr;
    if (!qr) return res.status(400).json({ error: "Thi·∫øu m√£ QR" });

    const query = `
      SELECT DATE_FORMAT(CONVERT_TZ(sorted_time, '+00:00', '+00:00'), '%H:%i:%s %d/%m/%Y') AS sorted_time,
      qr_code,address,tinhtrang FROM qr_sorted_log WHERE qr_code = ? ORDER BY sorted_time DESC LIMIT 1
    `;

    sqlcon.query(query, [qr], (err, results) => {
      if (err) return res.status(500).json({ error: "L·ªói truy v·∫•n SQL" });
      if (results.length === 0) return res.json({ found: false });
      res.json({ found: true, data: results[0] });
    });
});


app.get("/api/sorted-table", (req, res) => {
  const { from, to } = req.query;
  if (!from || !to) return res.status(400).json({ error: "Thi·∫øu from/to" });

  const query = `
    SELECT qr_code, address, sorted_time, tinhtrang 
    FROM qr_sorted_log 
    WHERE sorted_time BETWEEN ? AND ?
    ORDER BY sorted_time ASC
  `;

  sqlcon.query(query, [from, to], (err, results) => {
    if (err) {
      console.error("‚ùå L·ªói truy v·∫•n SQL:", err);
      return res.status(500).json({ error: err.message }); 
    }

    res.json(results);
  });
});;

const ExcelJS = require('exceljs');
const path = require('path');

app.get('/export-excel', (req, res) => {
  const { from, to } = req.query;
  if (!from || !to) return res.status(400).send("‚ùå Thi·∫øu 'from' ho·∫∑c 'to'");

  const query = `
    SELECT qr_code, address, sorted_time, tinhtrang 
    FROM qr_sorted_log 
    WHERE sorted_time BETWEEN ? AND ?
    ORDER BY sorted_time ASC
  `;

  sqlcon.query(query, [from, to], async (err, results) => {
    if (err) {
      console.error("‚ùå L·ªói truy v·∫•n:", err);
      return res.status(500).send("L·ªói khi export Excel");
    }

    try {
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet("B√°o c√°o ph√¢n lo·∫°i", {
        pageSetup: { paperSize: 9, orientation: 'landscape' },
        properties: { tabColor: { argb: 'FFC0000' } },
      });

      worksheet.properties.defaultRowHeight = 20;
      worksheet.pageSetup.margins = {
        left: 0.3, right: 0.25, top: 0.75, bottom: 0.75,
        header: 0.3, footer: 0.3,
      };

      const logoPath = path.join(__dirname, 'public', 'images', './logo/logo.jpg');
      const imageId = workbook.addImage({
        filename: logoPath,
        extension: 'png',
      });
      worksheet.addImage(imageId, 'A1:A3');

      worksheet.getCell('D1').value = 'Tr∆∞·ªùng ƒê·∫°i h·ªçc M·ªè - ƒê·ªãa Ch·∫•t';
      worksheet.getCell('D1').style = {
        font: { name: 'Times New Roman', bold: true, size: 14 },
        alignment: {vertical: 'middle' },
      };
      worksheet.getCell('D2').value = 'ƒê·ªãa ch·ªâ: 18 Ph·ªë Vi√™n, ƒê√¥ng Ng·∫°c, B·∫Øc T·ª´ Li√™m, H√† N·ªôi';
      worksheet.getCell('D3').value = 'Hotline: 024 3838 9633';

      // T√™n b√°o c√°o
      worksheet.mergeCells('A5:E5');
      worksheet.getCell('A5').value = 'B√ÅO C√ÅO PH√ÇN LO·∫†I S·∫¢N PH·∫®M';
      worksheet.getCell('A5').style = {
        font: { name: 'Times New Roman', bold: true, size: 16 },
        alignment: { horizontal: 'center', vertical: 'middle' },
      };

      // Ng√†y gi·ªù in b√°o c√°o
      const now = new Date();
      const formattedTime = now.toLocaleString("vi-VN", {
        hour12: false,
        timeZone: "Asia/Ho_Chi_Minh",
      });
      worksheet.getCell('E6').value = "Ng√†y in: " + formattedTime;
      worksheet.getCell('E6').alignment = { horizontal: 'right' };
      worksheet.getCell('E6').font = { italic: true };

      // Header b·∫£ng d·ªØ li·ªáu
      const headerRow = ["STT", "M√£ QR", "V·ªã tr√≠", "Th·ªùi gian ph√¢n lo·∫°i", "Tr·∫°ng th√°i"];
      worksheet.addRow(headerRow);

      const header = worksheet.getRow(7);
      header.eachCell((cell) => {
        cell.font = { bold: true };
        cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
      });

      // Th√™m d·ªØ li·ªáu
      results.forEach((row, index) => {
        const timeFormatted = new Date(row.sorted_time).toLocaleString("vi-VN", {
          hour12: false,
          timeZone: "Asia/Ho_Chi_Minh",
        });

        worksheet.addRow([
          index + 1,
          row.qr_code,
          row.address,
          timeFormatted,
          row.tinhtrang
        ]);
      });

      // CƒÉn l·ªÅ v√† border cho d·ªØ li·ªáu
      worksheet.eachRow((row, rowNumber) => {
        if (rowNumber > 7) {
          row.eachCell((cell) => {
            cell.alignment = { vertical: 'middle', horizontal: 'left', wrapText: true };
            cell.border = {
              top: { style: 'thin' },
              left: { style: 'thin' },
              bottom: { style: 'thin' },
              right: { style: 'thin' },
            };
          });
        }
      });

      // ƒê·∫∑t ƒë·ªô r·ªông c·ªôt
      worksheet.columns = [
        { key: "stt", width: 8 },
        { key: "qr_code", width: 25 },
        { key: "address", width: 30 },
        { key: "sorted_time", width: 25 },
        { key: "tinhtrang", width: 25 },
      ];

      // Header response
      res.setHeader("Content-Disposition", `attachment; filename=bao_cao_phan_loai_${from}_to_${to}.xlsx`);
      res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");

      await workbook.xlsx.write(res);
      res.end();
    } catch (excelErr) {
      console.error("‚ùå L·ªói khi ghi file Excel:", excelErr);
      return res.status(500).send("L·ªói khi xu·∫•t Excel");
    }
  });
});


// create chart
app.get("/api/chart-data", (req, res) => {
    const { start, end, mode } = req.query;
    const finalData = { position_counts: [], pie: [], history: [] };

    const positionTasks = Array.from({ length: 5 }, (_, i) => {
      return new Promise((resolve, reject) => {
        sqlcon.query(`SELECT COUNT(*) AS total FROM qr_sorted_log WHERE position = ? AND DATE(sorted_time) = CURDATE()`, [i + 1], (err, result) => {
          if (err) return reject(err);
          finalData.position_counts[i + 1] = result[0].total;
          resolve();
        });
      });
    });

    const pie1 = new Promise((resolve, reject) => {
      sqlcon.query(`SELECT COUNT(*) AS total FROM qr_sorted_log WHERE position = 6 AND DATE(sorted_time) = CURDATE()`, (err, result) => {
        if (err) return reject(err);
        finalData.pie[0] = result[0].total;
        resolve();
      });
    });

    const pie2 = new Promise((resolve, reject) => {
      sqlcon.query(`SELECT COUNT(*) AS total FROM qr_sorted_log WHERE position BETWEEN 1 AND 5 AND DATE(sorted_time) = CURDATE()`, (err, result) => {
        if (err) return reject(err);
        finalData.pie[1] = result[0].total;
        resolve();
      });
    });

    const historicalQuery = {
      day: `SELECT DATE_FORMAT(sorted_time, '%Y-%m-%d') AS label, COUNT(*) AS total 
            FROM qr_sorted_log 
            WHERE sorted_time BETWEEN ? AND ? 
            GROUP BY label`,
      month: `SELECT DATE_FORMAT(sorted_time, '%Y-%m') AS label, COUNT(*) AS total 
              FROM qr_sorted_log 
              WHERE sorted_time BETWEEN ? AND ? 
              GROUP BY label`,
      year: `SELECT DATE_FORMAT(sorted_time, '%Y') AS label, COUNT(*) AS total 
            FROM qr_sorted_log 
            WHERE sorted_time BETWEEN ? AND ? 
            GROUP BY label`
    }[mode];

    let endDateTime;
    if (mode === 'day') {
      endDateTime = end + ' 23:59:59';
    } else {
      endDateTime = end;
    }

    const historyTask = (start && end && historicalQuery) ? new Promise((resolve, reject) => {
      sqlcon.query(historicalQuery, [start, endDateTime], (err, results) => {
        if (err) return reject(err);
        finalData.history = results;
        resolve();
      });
    }) : Promise.resolve();


    Promise.all([...positionTasks, pie1, pie2, historyTask])
      .then(() => res.json(finalData))
      .catch(err => res.status(500).json({ error: "L·ªói truy v·∫•n d·ªØ li·ªáu" }));
});
