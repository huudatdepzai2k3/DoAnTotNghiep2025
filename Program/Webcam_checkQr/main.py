import sys
import pandas as pd
import cv2
from pyzbar.pyzbar import decode, ZBarSymbol
import numpy as np
import time
import os
import requests
import datetime
import pymysql
import threading
from ultralytics import YOLO
import snap7
from snap7.util import set_int
from PyQt5.QtCore import Qt, pyqtSignal, QThread, QTimer
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout,QLabel, QPushButton, QTextEdit, QFileDialog, QLineEdit, QLabel, QSizePolicy)
from PyQt5.QtGui import QPixmap, QImage, QFont

# ƒê·ªãnh nghƒ©a th√¥ng s·ªë k·∫øt n·ªëi PLC v√† Webserver
PLC_IP = '192.168.0.1'
RACK = 0
SLOT = 1
DB_NUMBER = 7
WEBSERVER_URL = 'http://127.0.0.1:3000'

# Th√¥ng tin k·∫øt n·ªëi MySQL
db_config = {
    "host": "127.0.0.1",
    "user": "admin",
    "password": "123456",
    "database": "sql_plc",
    "port": 3306,
    "charset": "utf8mb4",      
    "cursorclass": pymysql.cursors.DictCursor
}

# C√°c bi·∫øn l∆∞u tr·∫°ng th√°i IP v√† URL hi·ªán t·∫°i
plc_ip_current = PLC_IP
webserver_url_current = WEBSERVER_URL
last_camera_connected = False

# Bi·∫øn l∆∞u tr·∫°ng th√°i k·∫øt n·ªëi
last_plc_status = False
last_web_status = False
last_mysql_status = False
last_camera_state = False

# Kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi PLC
client = snap7.client.Client()
stop_threads = False

# Kh·ªüi t·∫°o lock ƒë·ªÉ ƒë·ªìng b·ªô h√≥a truy c·∫≠p c∆° s·ªü d·ªØ li·ªáu
lock = threading.Lock()

# Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn PLC
def is_connected(client):
    with lock:
        try:
            state = client.get_cpu_state()
            return state in ["S7CpuStatusRun", "S7CpuStatusStop"]
        except:
            return False

# Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Webserver
def is_connected_webserver():
    try:
        response = requests.get(webserver_url_current, timeout=3)
        return response.status_code == 200
    except:
        return False
    
## Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Mysql
def is_connected_mysql():
    try:
        conn = pymysql.connect(**db_config)
        if conn.open:
            return True
        else:
            return False
    except pymysql.MySQLError as e:
        return False

# H√†m ghi log QR code v√†o MySQL 
def insert_qr_sorting(qr_code, address, tinhtrang, position, sorted_time=None):
    import os
    if sorted_time is None:
        sorted_time = datetime.datetime.now()

    conn = None
    cursor = None
    try:
        conn = pymysql.connect(**db_config)
        cursor = conn.cursor()

        sql = """SELECT 1 FROM qr_sorted_log WHERE qr_code=%s LIMIT 1"""
        cursor.execute(sql, (qr_code,))
        result = cursor.fetchone()

        if result is not None:
            sql = """
                UPDATE qr_sorted_log
                SET sorted_time=%s, address=%s, tinhtrang=%s, position=%s
                WHERE qr_code=%s
            """
            values = (sorted_time, address, tinhtrang, position, qr_code)
            cursor.execute(sql, values)
            conn.commit()
        else:
            sql = """
                INSERT INTO qr_sorted_log (sorted_time, qr_code, address, tinhtrang, position)
                VALUES (%s, %s, %s, %s, %s)
            """
            values = (sorted_time, qr_code, address, tinhtrang, position)
            cursor.execute(sql, values)
            conn.commit()

        window.log_to_terminal(f"‚úÖ Ghi th√†nh c√¥ng QR: {qr_code} v√†o MySQL l√∫c {sorted_time}")
    except (pymysql.MySQLError, Exception) as e:
        window.log_to_terminal(f"‚ùå L·ªói ghi MySQL: {e}")

        # T·∫°o d·ªØ li·ªáu ghi v√†o CSV
        data = {
            "sorted_time": [sorted_time],
            "qr_code": [qr_code],
            "address": [address],
            "tinhtrang": [tinhtrang],
            "position": [position]
        }
        df = pd.DataFrame(data)

        csv_file = "product_log.csv"
        # N·∫øu file ch∆∞a t·ªìn t·∫°i, ghi header; n·∫øu t·ªìn t·∫°i th√¨ ghi n·ªëi ti·∫øp
        write_header = not os.path.exists(csv_file)
        df.to_csv(csv_file, mode='a', index=False, header=write_header, encoding='utf-8')
        print(f"‚ö†Ô∏è ƒê√£ ghi d·ªØ li·ªáu v√†o file t·∫°m: {csv_file}")
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

def send_data_to_plc_SQL(qr_code, address, tinhtrang, position):
    if not last_plc_status:
        window.log_to_terminal("‚ùå L·ªói: m·∫•t k·∫øt n·ªëi v·ªõi PLC")
        return

    try:
        with lock :
            ready_flag = client.db_read(7, 2, 1)
            if snap7.util.get_bool(ready_flag, 0, 2):
                window.log_to_terminal("‚ö†Ô∏è PLC ch∆∞a s·∫µn s√†ng nh·∫≠n d·ªØ li·ªáu do h·ªá th·ªëng ƒëang l·ªói")
                return
            
            if not snap7.util.get_bool(ready_flag, 0, 3):
                window.log_to_terminal("‚ö†Ô∏è PLC ch∆∞a s·∫µn s√†ng nh·∫≠n d·ªØ li·ªáu do h·ªá th·ªëng kh√¥ng ·ªü ch·∫ø ƒë·ªô t·ª± ƒë·ªông")
                return

        if not (1 <= position <= 6):
            window.log_to_terminal(f"‚ö†Ô∏è V·ªã tr√≠ {position} kh√¥ng h·ª£p l·ªá")
            return
        
        with lock :
            data_push = bytearray(2)
            snap7.util.set_int(data_push, 0, position)
            client.db_write(DB_NUMBER, 0, data_push)

            trigger = client.db_read(DB_NUMBER, 2, 1)
            snap7.util.set_bool(trigger, 0, 0, True)
            client.db_write(DB_NUMBER, 2, trigger)

            time.sleep(0.25)

            snap7.util.set_bool(trigger, 0, 0, False)
            client.db_write(DB_NUMBER, 2, trigger)

            window.log_to_terminal(f"üì§ ƒê√£ g·ª≠i v·ªã tr√≠ {position} v√†o PLC")
        try:
            insert_qr_sorting(qr_code, address, tinhtrang, position)
        except Exception as e_db:
            window.log_to_terminal(f"‚ö†Ô∏è L·ªói ghi MySQL: {e_db}")

    except Exception as e:
        window.log_to_terminal(f"‚ùå L·ªói g·ª≠i d·ªØ li·ªáu v·ªã tr√≠ v√†o PLC: {e}")

# L·∫•y v·ªã tr√≠ t·ª´ d·ªØ li·ªáu Excel v√† g·ª≠i v√†o PLC
def get_position_from_file(qr_code, tinhtrang):
    global window
    try:
        # Ki·ªÉm tra d·ªØ li·ªáu Excel ƒë√£ load ch∆∞a
        if (
            'window' not in globals()
            or not hasattr(window, 'data_dict')
            or not hasattr(window, 'address_to_pos_dict')
            or not window.data_dict
            or not window.address_to_pos_dict
        ):
            window.log_to_terminal("‚ö†Ô∏è Ch∆∞a t·∫£i d·ªØ li·ªáu Excel ho·∫∑c d·ªØ li·ªáu r·ªóng.")
            return

        # Ki·ªÉm tra QR code c√≥ trong Excel kh√¥ng
        if qr_code not in window.data_dict:
            window.log_to_terminal("‚ö†Ô∏è QR code kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu Excel.")
            window.qr_label_2.setText("üì¶ T√¨nh tr·∫°ng h√†ng: Kh√¥ng x√°c ƒë·ªãnh")
            send_data_to_plc_SQL(qr_code, "Kh√¥ng x√°c ƒë·ªãnh","Kh√¥ng x√°c ƒë·ªãnh", 6)
            return
        else :
            if tinhtrang == 'h√†ng r√°ch':
                window.qr_label_2.setText("üì¶ T√¨nh tr·∫°ng h√†ng: R√°ch")
            elif tinhtrang == 'b√¨nh th∆∞·ªùng':
                window.qr_label_2.setText("üì¶ T√¨nh tr·∫°ng h√†ng: B√¨nh th∆∞·ªùng")

        # L·∫•y ƒë·ªãa ch·ªâ t·ª´ file Excel
        address = str(window.data_dict[qr_code]).strip()
        window.pos_label.setText(f"üìç V·ªã tr√≠: {address}")

        words1 = address.lower().split()
        best_match, max_len_max = None, 0

        # T√¨m file_address c√≥ c·ª•m t·ª´ chung d√†i nh·∫•t
        for file_address, file_pos in window.address_to_pos_dict.items():
            words2 = file_address.lower().split()
            n, m = len(words1), len(words2)
            dp = [[0] * (m + 1) for _ in range(n + 1)]
            max_len = 0

            for i in range(n):
                for j in range(m):
                    if words1[i] == words2[j]:
                        dp[i + 1][j + 1] = dp[i][j] + 1
                        max_len = max(max_len, dp[i + 1][j + 1])

            if max_len > max_len_max:
                max_len_max = max_len
                best_match = (file_address, file_pos)

        # N·∫øu t√¨m ƒë∆∞·ª£c v·ªã tr√≠ ph√π h·ª£p
        if best_match and max_len_max > 0:
            _, file_pos = best_match
            try:
                pos = 6 if tinhtrang == 'h√†ng r√°ch' else int(file_pos)
            except ValueError:
                window.log_to_terminal(f"‚ö†Ô∏è Gi√° tr·ªã file_pos kh√¥ng h·ª£p l·ªá: {file_pos}")
                pos = 6

            window.log_to_terminal(f"‚úÖ V·ªã tr√≠ ph√¢n lo·∫°i: {pos}")
            send_data_to_plc_SQL(qr_code, address, tinhtrang, pos)
        else:
            window.log_to_terminal("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ ph√π h·ª£p.")

    except Exception as e:
        window.log_to_terminal(f"‚ùå L·ªói ƒë·ªçc file: {e}")
    
# L·ªõp theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi PLC v√† Webserver
class ConnectionMonitorThread(QThread):
    status_updated = pyqtSignal(bool, bool, bool)
    def run(self):
        global stop_threads , last_plc_status, last_web_status, last_mysql_status
        while not stop_threads:
            if is_connected(client) != last_plc_status or is_connected_webserver() != last_web_status or is_connected_mysql() != last_mysql_status:
                self.status_updated.emit(is_connected(client), is_connected_webserver(), is_connected_mysql())
                last_plc_status = is_connected(client)
                last_web_status = is_connected_webserver()
                last_mysql_status = is_connected_mysql()

            if last_mysql_status:
                # Ghi l·∫°i d·ªØ li·ªáu t·ª´ product_log.csv (n·∫øu c√≥)
                csv_file = 'product_log.csv'
                if os.path.exists(csv_file):
                    df = pd.read_csv(csv_file)
                    for _, row in df.iterrows():
                        sorted_time = row['sorted_time']
                        qr_code = row['qr_code']
                        address = row['address']
                        tinhtrang = row['tinhtrang']
                        position = row['position']
                        insert_qr_sorting(qr_code, address, tinhtrang, position, sorted_time)

                    # Ghi xong to√†n b·ªô th√¨ x√≥a file
                    os.remove(csv_file)
                    window.log_to_terminal("üóëÔ∏è ƒê√£ ghi l·∫°i v√† x√≥a file product_log.csv")
            else:
                window.log_to_terminal("üîÑ M·∫•t k·∫øt n·ªëi SQL. Th·ª≠ k·∫øt n·ªëi l·∫°i...")
                try:
                    conn = pymysql.connect(**db_config)
                    if conn.open:
                        window.log_to_terminal("‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i MySQL th√†nh c√¥ng.")
                    conn.close()
                except Exception as e:
                    window.log_to_terminal(f"‚ùå L·ªói k·∫øt n·ªëi l·∫°i MySQL: {e}")

            # X·ª≠ l√Ω m·∫•t k·∫øt n·ªëi PLC
            if not last_plc_status:
                window.log_to_terminal("üîÑ M·∫•t k·∫øt n·ªëi PLC. Th·ª≠ k·∫øt n·ªëi l·∫°i...")
                try:
                    if not client.get_connected():
                        client.connect(plc_ip_current, RACK, SLOT)
                        window.log_to_terminal("‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i PLC th√†nh c√¥ng.")
                    else:
                        try:
                            client.db_read(1, 0, 1) 
                        except:
                            client.disconnect()
                            client.connect(plc_ip_current, RACK, SLOT)
                            window.log_to_terminal("‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i PLC sau khi ki·ªÉm tra l·ªói ƒë·ªçc.")
                except Exception as e:
                    window.log_to_terminal(f"‚ùå L·ªói k·∫øt n·ªëi l·∫°i PLC: {e}")
                    client.disconnect()  

            # X·ª≠ l√Ω m·∫•t k·∫øt n·ªëi Webserver
            if not last_web_status:
                window.log_to_terminal("üîÑ M·∫•t k·∫øt n·ªëi Webserver. Th·ª≠ k·∫øt n·ªëi l·∫°i...")
                if is_connected_webserver():
                    window.log_to_terminal("‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i Webserver th√†nh c√¥ng.")
                else:
                    window.log_to_terminal("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i Webserver.")

            time.sleep(1)

# L·ªõp giao di·ªán ch√≠nh ·ª©ng d·ª•ng
class DemoApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Giao di·ªán ƒë·∫ßu v√†o")
        self.setFixedSize(1800, 600)
        self.setGeometry(100, 100, 1000, 300)

        self.capture = cv2.VideoCapture(2, cv2.CAP_DSHOW)
        self.capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        self.camera_connected = self.capture.isOpened()

        self.yolo_model = None  
        self.last_yolo_time = 0

        self.last_qr_code = ""
        self.last_detection_time = time.time()

        # T·∫°o QTimer ƒë·ªÉ x·ª≠ l√Ω frame ƒë·ªãnh k·ª≥
        self.camera_timer = QTimer()
        self.camera_timer.timeout.connect(self.read_frame)
        self.camera_timer.start(30)  # M·ªói 30ms ~ 33 FPS

        self.tinhtrang = "b√¨nh th∆∞·ªùng"  

        # Thi·∫øt l·∫≠p giao di·ªán
        main_layout = QHBoxLayout()

        self.excel_btn = QPushButton("üìÇ Ch·ªçn file Excel")
        self.excel_btn.clicked.connect(self.load_excel)  
        self.excel_display = QTextEdit()
        self.excel_display.setReadOnly(True)

        left_layout = QVBoxLayout()
        left_layout.addWidget(QLabel("üóÇ Nh·∫≠p d·ªØ li·ªáu t·ª´ Excel:"))
        left_layout.addWidget(self.excel_btn)
        left_layout.addWidget(self.excel_display)

        # Hi·ªÉn th·ªã video t·ª´ camera
        self.image_label = QLabel()
        self.image_label.setFixedSize(640, 480)
        self.image_label.setStyleSheet("background-color: lightgray")

        center_layout = QVBoxLayout()
        center_layout.addWidget(QLabel("üé• Camera (video tr·ª±c ti·∫øp):"))
        center_layout.addWidget(self.image_label)

        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ m√£ QR v√† v·ªã tr√≠
        self.qr_label = QLabel("üì¶ M√£ QR: (ch∆∞a c√≥)")
        self.pos_label = QLabel("üìç V·ªã tr√≠: (ch∆∞a c√≥)")
        self.qr_label_2 = QLabel("üì¶ T√¨nh tr·∫°ng h√†ng: (ch∆∞a c√≥)")
        self.plc_status_label = QLabel("üîå PLC: ƒêang ki·ªÉm tra...")
        self.webserver_status_label = QLabel("üîå Webserver: ƒêang ki·ªÉm tra...")
        self.mySQL_status_label = QLabel("üîå MySQL: ƒêang ki·ªÉm tra...")

        # ƒê√®n b√°o tr·∫°ng th√°i k·∫øt n·ªëi
        self.plc_status_led = QLabel()
        self.plc_status_led.setFixedSize(20, 20)
        self.webserver_status_led = QLabel()
        self.webserver_status_led.setFixedSize(20, 20)
        self.mySQL_status_led = QLabel()
        self.mySQL_status_led.setFixedSize(20, 20)

        # C√°c layout cho PLC v√† Webserver
        plc_layout = QHBoxLayout()
        plc_layout.addWidget(self.plc_status_label)
        plc_layout.addWidget(self.plc_status_led)
        web_layout = QHBoxLayout()
        web_layout.addWidget(self.webserver_status_label)
        web_layout.addWidget(self.webserver_status_led)
        mySQL_layout = QHBoxLayout()
        mySQL_layout.addWidget(self.mySQL_status_label)
        mySQL_layout.addWidget(self.mySQL_status_led)

        self.ip_input = QLineEdit()
        self.ip_input.setText(PLC_IP)
        self.url_input = QLineEdit()
        self.url_input.setText(WEBSERVER_URL)

        self.ip_btn = QPushButton("üîÑ C·∫≠p nh·∫≠t IP v√† URL m·ªõi.")
        self.ip_btn.clicked.connect(self.update_plc_webserver_address)

        right_layout = QVBoxLayout()
        right_layout.addWidget(QLabel("üì§ Th√¥ng tin Output:"))
        right_layout.addWidget(self.qr_label)
        right_layout.addWidget(self.pos_label)
        right_layout.addWidget(self.qr_label_2)
        right_layout.addLayout(plc_layout)
        right_layout.addLayout(web_layout)
        right_layout.addLayout(mySQL_layout)
        right_layout.addWidget(QLabel("üåê URL Webserver:"))
        right_layout.addWidget(self.url_input)
        right_layout.addWidget(QLabel("üåê IP PLC:"))
        right_layout.addWidget(self.ip_input)
        right_layout.addWidget(self.ip_btn)
        right_layout.addStretch()

        # Output cho terminal log
        self.terminal_output = QTextEdit()
        self.terminal_output.setReadOnly(True)
        self.terminal_output.setStyleSheet("background-color: black; color: white;")
        font = QFont("Consolas")
        font.setPointSize(9)
        self.terminal_output.setFont(font)

        terminal_layout = QVBoxLayout()
        terminal_layout.addWidget(QLabel("üñ• Terminal Output:"))
        terminal_layout.addWidget(self.terminal_output)

        main_layout.addLayout(left_layout)
        main_layout.addLayout(center_layout)
        main_layout.addLayout(right_layout)
        main_layout.addLayout(terminal_layout)

        self.setLayout(main_layout)
        self.data_dict = {}
        self.address_to_pos_dict = {}

        # # Kh·ªüi t·∫°o c√°c thread
        self.connection_thread = ConnectionMonitorThread()
        self.connection_thread.status_updated.connect(self.update_status)
        self.connection_thread.start() 

    # H√†m log th√¥ng b√°o v√†o terminal
    def log_to_terminal(self, msg):
        self.terminal_output.append(msg)
        self.terminal_output.moveCursor(self.terminal_output.textCursor().End)

        max_lines = 200
        doc = self.terminal_output.document()
        if doc.blockCount() > max_lines:
            cursor = self.terminal_output.textCursor()
            cursor.movePosition(cursor.Start)
            for _ in range(doc.blockCount() - max_lines):
                cursor.select(cursor.BlockUnderCursor)
                cursor.removeSelectedText()
                cursor.deleteChar()

    # H√†m t·∫£i d·ªØ li·ªáu t·ª´ file Excel
    def load_excel(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn file Excel", "", "Excel Files (*.xlsx *.xls)")
        if file_path:
            try:
                df = pd.read_excel(file_path)
                if not {'QR', 'Address'}.issubset(df.columns):
                    self.excel_display.setText("‚ùå File Excel c·∫ßn c√≥ c·ªôt 'QR' v√† 'Address'")
                    return
                self.excel_display.setText(str(df))
                self.data_dict = {str(row['QR']).strip(): row['Address'] for _, row in df.iterrows()}
                self.address_to_pos_dict = {}
                file_path_txt = os.path.join(os.getcwd(), "adress_to_position.txt")
                if os.path.exists(file_path_txt):
                    with open(file_path_txt, "r", encoding="utf-8") as f:
                        for line in f:
                            parts = line.strip().split(' | ')
                            if len(parts) >= 2:
                                addr, pos = parts
                                self.address_to_pos_dict[addr.strip()] = int(float(pos))
                else :
                    self.log_to_terminal("‚ùå Thi·∫øu d·ªØ li·ªáu v·ªã tr√≠ setup.")
                self.log_to_terminal("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu Excel v√† d·ªØ li·ªáu v·ªã tr√≠.")
            except Exception as e:
                self.excel_display.setText(f"L·ªói: {e}")
                self.log_to_terminal(f"‚ùå L·ªói t·∫£i Excel: {e}")

    def read_frame(self):
        global last_camera_state
        if self.yolo_model is None:
            self.log_to_terminal("‚è≥ ƒêang load m√¥ h√¨nh YOLO...")
            self.yolo_model = YOLO("best.pt")
            self.log_to_terminal("‚úÖ YOLO ƒë√£ s·∫µn s√†ng.")
        ret, frame = (self.capture.read() if self.capture else (False, None))
        if not ret or frame is None:
            self.log_to_terminal("üîÑ M·∫•t k·∫øt n·ªëi camera. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
            if last_plc_status and last_camera_state == True:
                try:
                    with lock :
                        last_camera_state = False
                        data_push_2 = client.db_read(DB_NUMBER, 2, 1)
                        snap7.util.set_bool(data_push_2, 0, 1, False)
                        client.db_write(DB_NUMBER, 2, data_push_2)  
                        self.log_to_terminal("‚ùå ƒê√£ ghi tr·∫°ng th√°i camera m·∫•t k·∫øt n·ªëi v√†o PLC.")
                except Exception as e:
                        self.log_to_terminal(f"‚ùå L·ªói ghi PLC tr·∫°ng th√°i camera: {e}")

            if self.capture:
                self.capture.release()

            found = False
            for cam_index in range(0, 3):
                cap_test = cv2.VideoCapture(cam_index, cv2.CAP_DSHOW)
                cap_test.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
                cap_test.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
                if cap_test.isOpened():
                    self.capture = cap_test
                    self.log_to_terminal(f"‚úÖ ƒê√£ ph√°t hi·ªán & k·∫øt n·ªëi l·∫°i camera USB (index {cam_index}).")
                    self.camera_connected = True
                    found = True
                    break

            if not found:
                self.log_to_terminal("‚ùå Ch∆∞a ph√°t hi·ªán camera USB. S·∫Ω th·ª≠ l·∫°i sau...")
                self.camera_connected = False
            return
        else:
            if last_plc_status and last_camera_state == False:
                try:
                    with lock:
                        last_camera_state = True
                        data_push_2 = client.db_read(DB_NUMBER, 2, 1)
                        snap7.util.set_bool(data_push_2, 0, 1, True)
                        client.db_write(DB_NUMBER, 2, data_push_2)
                        self.log_to_terminal("‚úÖ ƒê√£ ghi tr·∫°ng th√°i camera k·∫øt n·ªëi th√†nh c√¥ng v√†o PLC.")
                except Exception as e:
                    self.log_to_terminal(f"‚ùå L·ªói ghi PLC tr·∫°ng th√°i camera: {e}")

            try :
                self.current_status = "b√¨nh th∆∞·ªùng"
                self.counter = 0
                self.threshold = 3  

                small_frame = cv2.resize(frame, (640, 480))
                # --- YOLO detection (ch·∫°y 5 FPS = m·ªói 200ms) ---
                now = time.time()
                if now - self.last_yolo_time > 0.2:
                    self.last_yolo_time = now
                    results = self.yolo_model.predict(small_frame, imgsz=(640, 480), conf=0.5, verbose=False)

                    detected = "b√¨nh th∆∞·ªùng"
                    for r in results:
                        for box in r.boxes:
                            cls_id = int(box.cls[0])
                            conf = float(box.conf[0])

                            if self.yolo_model.names[cls_id] == "hang_rach" and conf > 0.7:
                                detected = "h√†ng r√°ch"
                                if conf > 0.9:
                                    self.current_status = "h√†ng r√°ch"
                                    self.counter = 0
                                break   

                    if detected != self.current_status:
                        self.counter += 1
                        if self.counter >= self.threshold:
                            self.current_status = detected
                            self.counter = 0
                    else:
                        self.counter = 0

                    self.tinhtrang = self.current_status

                # --- QR code detection ---
                qrcodes = decode(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY), symbols=[ZBarSymbol.QRCODE])
                for qrcode in qrcodes:
                    x, y, w, h = qrcode.rect
                    if w > 0 and h > 0:
                        data = qrcode.data.decode("utf-8")
                        if now - self.last_detection_time > 0.25 and data != self.last_qr_code:
                            self.last_qr_code = data
                            self.last_detection_time = now
                            self.qr_label.setText(f"üì¶ M√£ QR: {data}")
                            self.pos_label.setText("üìç V·ªã tr√≠: ch∆∞a bi·∫øt")
                            get_position_from_file(data, self.tinhtrang)

                        # V·∫Ω khung QR
                        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 255, 0), 2)
                        cv2.putText(frame, f"{data}", (x, y - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 255), 2)

                self.update_image(frame)

            except Exception as e:
                self.log_to_terminal(f"‚ùå L·ªói qu√©t QR/YOLO: {e}")

    # C·∫≠p nh·∫≠t h√¨nh ·∫£nh t·ª´ camera
    def update_image(self, frame):
        rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        qt_img = QImage(rgb_image.data, w, h, ch * w, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qt_img).scaled(self.image_label.size(), Qt.KeepAspectRatio)
        self.image_label.setPixmap(pixmap)
            
    # C·∫≠p nh·∫≠t th√¥ng tin m√£ QR khi ph√°t hi·ªán
    def update_qr_info(self, qr_code):
        self.qr_label.setText(f"üì¶ M√£ QR: {qr_code}")

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi PLC, Webserver, MySQL
    def update_status(self, plc_connected, web_connected, mysql_connected):
        self.plc_status_label.setText("üîå PLC: ƒê√£ k·∫øt n·ªëi" if plc_connected else "üîå PLC: M·∫•t k·∫øt n·ªëi")
        self.plc_status_led.setStyleSheet("background-color: green;" if plc_connected else "background-color: red;")
        self.webserver_status_label.setText("üîå Webserver: ƒê√£ k·∫øt n·ªëi" if web_connected else "üîå Webserver: M·∫•t k·∫øt n·ªëi")
        self.webserver_status_led.setStyleSheet("background-color: green;" if web_connected else "background-color: red;")
        self.mySQL_status_label.setText("üîå MySQL: ƒê√£ k·∫øt n·ªëi" if mysql_connected else "üîå MySQL: M·∫•t k·∫øt n·ªëi")
        self.mySQL_status_led.setStyleSheet("background-color: green;" if mysql_connected else "background-color: red;")


    # C·∫≠p nh·∫≠t l·∫°i IP v√† URL cho PLC v√† Webserver
    def update_plc_webserver_address(self):
        global plc_ip_current, webserver_url_current
        new_ip = self.ip_input.text().strip()
        new_url = self.url_input.text().strip()
        if not new_ip or not new_url:
            self.log_to_terminal("‚ùå IP PLC ho·∫∑c URL Webserver kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            return
        plc_ip_current = new_ip
        webserver_url_current = new_url
        self.log_to_terminal(f"üîÅ ƒê√£ c·∫≠p nh·∫≠t PLC IP m·ªõi : {new_ip} v√† URL Webserver m·ªõi : {new_url}.")

    # X·ª≠ l√Ω s·ª± ki·ªán khi ƒë√≥ng c·ª≠a s·ªï
    def closeEvent(self, event):
        global stop_threads
        stop_threads = True
        self.connection_thread.quit()
        self.connection_thread.wait()

        self.camera_timer.stop()
        if self.capture.isOpened():
            self.capture.release()
        event.accept()

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = DemoApp()
    window.show()
    sys.exit(app.exec_())
